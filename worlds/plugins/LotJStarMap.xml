<?xml version="1.0" encoding="iso-8859-1" ?> 
<!DOCTYPE muclient> 
<!--  Saved on Thursday, July 05, 2012, 1:04 AM   --> 
<!-- MuClient version 4.73 --> 
<muclient>
<plugin name="LotJStarMap" author="@Johnson" id="dd5080a41939faabc233da8f" language="Lua" purpose="Star System Map" save_state="y" requires="4.73" version="2.16">
<description trim="y">
<![CDATA[
Type "showmap" to open map window without scanning, loading your saved planetary information.
Type "hidemap" to close map window, or click the X in the upper right to close.
Type "hypmap" to scan for new starsystems and plot on map.
Hover mouse over systems to see distances to other systems.
Click on a system to calculate a jump to the planet within that system.
  ]]> 
  </description>
  </plugin>
<!--   Get our standard constants   --> 
  <include name="constants.lua" /> 
<!--   Triggers    --> 
<triggers>
	<trigger name="systemCapture" script="storeSystem" match="^(.*)\( (.*)\, (.*) \)$" regexp="y" group="StarCap" omit_from_log="y" omit_from_output="y" sequence="100" />
	<trigger name="starsFailed" script="toggleOff" match="^You must hold a datapad to do this\.$" regexp="y" group="StarCap" sequence="100" />
	<trigger name="systemCapDone" script="findPlanets" match="^Show what to whom\?$" regexp="y" group="StarCap" omit_from_log="y" omit_from_output="y" sequence="100" />
	<trigger name="planetCapTitle" match="Planet*Starsystem*Governed By*Popular Support" enabled="n" group="PlanetCap" omit_from_log="y" omit_from_output="y" sequence="100" />
	<trigger name="planetCapture" script="storePlanet" match="^(.*)\.\d$" regexp="y" enabled="n" group="PlanetCap" omit_from_log="y" omit_from_output="y" sequence="100" />
	<trigger name="planetCapDone" script="setupWindow" match="^Use SHOWPLANET for more information\.$" regexp="y" enabled="n" group="PlanetCap" omit_from_log="y" omit_from_output="y" sequence="100" />
	<!-- Lightspeed triggers -->
	<trigger name="partialJump" match="^Remaining jump distance\: (.*)$" script="storePartialJump" group="LotJStarMap" enabled="y" regexp="y" sequence="100" />
	<trigger name="completedjump" match="^Hyperjump complete\.$" script="clearJump" group="LotJStarMap" enabled="y" regexp="y" sequence="100" />
	<trigger name="calculatingjump" match="^Checking hyperspace course integrity\. Please wait\.$" script="jumpChecking" group="LotJStarMap" enabled="y" regexp="y" sequence="100" />
  <trigger name="lowfueljump" match="^Warning \- Not enough fuel to complete the jump to hyperspace\!$" script="jumpError" group="LotJStarMap" enabled="y" regexp="y" sequence="100" />
  <trigger name="calculatedjump" match="^\[Status\]\: Hyperspace Calculations have been completed\.$" script="jumpChecked" group="LotJStarMap" enabled="y" regexp="y" sequence="100" />
	<trigger name="abortedjump" match="^Hyperjump aborting\! Shutting down the Hyperdrive\.$" script="jumpAborted" group="LotJStarMap" enabled="y" regexp="y" sequence="100" />
  <trigger name="enterhyper" match="^The stars become streaks of light as you enter hyperspace\.$" script="enterHyper" group="LotJStarMap" enabled="y" regexp="y" sequence="100" />
  </triggers>
<!--   Aliases    --> 
<aliases>
  <alias name="initCommand" script="findStars" match="hypmap" enabled="y" regexp="n" group="LotJStarMap" ignore_case="y" sequence="100" />
  <alias name="createWindow" script="setupWindow" match="showmap" enabled="y" regexp="n" group="LotJStarMap" ignore_case="y" sequence="100" />
  <alias name="removeWindow" script="destroyWindow" match="hidemap" enabled="y" regexp="n" group="LotJStarMap" ignore_case="y" sequence="100" />
  </aliases>
<timers>
	<timer name="hyperJumpTicker" script="hyperJumpTick" enabled="n" second="2" group="LotJStarMap" />
</timers>
<!--   Script    --> 
<script>
<![CDATA[ 

require "movewindow"
require "serialize"
local win = "galaxy_map_" .. GetPluginID()  -- unique window name
systems = {}
local system = { name = "", x = 99999, y = 99999, planet = "", left = 0, top = 0, right = 0, bottom = 0 }
loadstring(GetVariable("systems") or "") ()
local font = "f"
local maxX = 0
local minX = 0
local maxY = 0
local minY = 0
local smaxX = 0
local smaxY = 0
local sminX = 0
local sminY = 0
local failsafe = 0
local visible = false

-- hyperjump stuff
local totalJump = 0
local partialJump = 0
local startx = nil
local starty = nil
local realx = nil
local realy = nil
local currentX = nil
local currentY = nil
local currentPlanet = ""
local currentSystem = ""
local endX = nil
local endY = nil
local startrealx = nil
local startrealy = nil
local routeType = ""
local shipsize = 8
local inHyper = false
local coordchanged = false


-- Variables not saved.
local startposx   = ""  
local startposy   = ""
local posx        = "" 
local posy        = ""
local RESIZE_TAG_SIZE = 10
local MIN_WIDTH   = 50
local MIN_HEIGHT  = 50

local width       = tonumber(GetVariable("width")) or 800
local height      = tonumber(GetVariable("height")) or 600

function storePlanet(name, list, args)
	--Note("1: '" .. args[1] .. "'")
	for i, v in ipairs(systems) do
		local sysName = v.name
		if (string.find(args[1], sysName)) then -- if the system name was found in the grab text
			systems[i].planet = Trim(string.sub(args[1], 1, string.find(args[1], sysName)-1)) -- set the planetname
			--Note("System: '" .. systems[i].name .. "' Planet: '" .. systems[i].planet .. "'")
		end
	end
end


function findStars(name, list, args)
  systems = {}
	SendNoEcho("stars")
	SendNoEcho("show")
	toggleOn()
end

function findPlanets(name, list, args)
	SendNoEcho("planets")
	togglePlanetsOn()
end

function togglePlanetsOn(name, list, args)
	EnableTriggerGroup("PlanetCap", true)
end

function toggleOn(name, list, args)
	EnableTriggerGroup("StarCap", true)
	--WindowCreate (win, 0, 0, 800, 600, miniwin.pos_center_all, 0, ColourNameToRGB("black"))  -- create window
	--WindowFont (win, font, "Arial", 10, true, false, false, false) -- define font
end

function storeSystem(name, list, args)
	if (args[1] and args[2] and args[3]) then
		system.name = Trim(args[1])
		system.x = tonumber(args[2])
		system.y = tonumber(args[3])
		systems[#systems + 1] = system
    system = { name = "", x = 99999, y = 99999, planet = "", left = 0, top = 0, right = 0, bottom = 0 }
	end
end

function toggleOff(name, list, args)
	EnableTriggerGroup("StarCap", false)
end

function togglePlanetsOff(name, list, args)
	EnableTriggerGroup("PlanetCap", false)
end

function setupWindow(name, line, args)
  if #systems == 0 then -- failsafe in case we try to display window without any planet information
    findStars()
    return
  end
	toggleOff()
	togglePlanetsOff()
	
	-- find our real max and min values so we can scale accordingly
	for i=1,#systems,1 do
		local sys = systems[i]
		if (sys.x > maxX) then
			maxX = sys.x
		end
		if (sys.x < minX) then
		  minX = sys.x
		end
		if (sys.y > maxY) then
			maxY = sys.y
		end
		if (sys.y < minY) then
		  minY = sys.y
		end
	end	
	
	setupConflicts()
	
	visible = true
  drawWindow()
end

function setupConflicts()
  -- setup our text boundaries since we just now figured out our max and min values for scaling
  for i, v in ipairs(systems) do
  	v.left = scaleXCoord(v.x) - WindowTextWidth(win, font, ((v.planet~="" and v.planet) or v.name))/2 + 5
		v.top = scaleYCoord(v.y) + 5
		v.right = v.left + WindowTextWidth(win, font, ((v.planet~="" and v.planet) or v.name)) -- font width
		v.bottom = v.top + WindowFontInfo(win, font, 1) -- font height
  end
  -- find our scaled max and mins
  smaxX = scaleXCoord(maxX)
  smaxY = scaleYCoord(maxY)
  sminX = scaleXCoord(minX)
  sminY = scaleYCoord(minY)
  --Note("maxX: "..maxX.." minX: "..minX.." maxY: "..maxY.." minY: "..minY)
  --Note("smaxX: "..smaxX.." sminX: "..sminX.." smaxY: "..smaxY.." sminY: "..sminY)
  
  -- recursively resolve conflicts with other systems
  failsafe = 0
  resolveConflicts()
end

function resolveConflicts()
  if failsafe <= 20 then -- we don't want to get stuck in an infinite recursion loop
  -- resolve window boundary conflicts
  for i, v in ipairs(systems) do
  --Note("system: "..v.name.." left: "..v.left.." top: "..v.top.." right: "..v.right.." bottom:"..v.bottom)
    if v.right > smaxX then
      v.left = smaxX - WindowTextWidth(win, font, ((v.planet~="" and v.planet) or v.name))
      v.right = smaxX
    end
    if v.left < sminX then
      v.left = sminX
      v.right = v.left + WindowTextWidth(win, font, ((v.planet~="" and v.planet) or v.name))
    end
    if v.bottom > sminY then
      v.top = sminY - WindowFontInfo(win, font, 1) - 5
      v.bottom = sminY - 5
    end
  end
  -- resolve system conflicts
  for i, v in ipairs(systems) do
    for j, k in ipairs(systems) do
      if (i ~= j) then -- don't check a system against itself
        if conflicts(v, k) then -- uh oh we have a collision!
          failsafe = failsafe + 1
          resolveConflicts()
        end
      end
    end
  end
  end
end

-- this needs to be done better TODO
-- at the moment this works, but I am envisioning a system of 
-- calculating many different label positions, finding the
-- distance of the label from the marker, then choosing the label positions 
-- that maintain the best position for all systems in the vicinity
-- maybe it's overkill but if it's worth doing, it's worth overdoing.
function conflicts(sys1, sys2)
  if topleftconflicts(sys1, sys2) then
    --Note("Top Left Collision detected! ("..sys1.name..","..sys2.name..")")
    -- top left collided, try shifting down (add pixels)
    sys1.top = sys2.bottom + 1
    sys1.bottom = sys1.top + WindowFontInfo(win, font, 1)
    --sys1, sys2 = findbestsolution(sys1, sys2)
    return true
  elseif bottomleftconflicts(sys1, sys2) then
    --Note("Bottom Left Collision detected! ("..sys1.name..","..sys2.name..")")
    -- bottom left collided, try shifting the other guy down (add pixels)
    sys2.top = sys1.bottom + 1
    sys2.bottom = sys2.top + WindowFontInfo(win, font, 1)
    --sys1, sys2 = findbestsolution(sys1, sys2)
    return true
  elseif toprightconflicts(sys1, sys2) then
    --Note("Top Right Collision detected! ("..sys1.name..","..sys2.name..")")
    -- try shifting down first (add pixels)
    sys1.top = sys2.bottom + 1
    sys1.bottom = sys1.top + WindowFontInfo(win, font, 1)
    --sys1, sys2 = findbestsolution(sys1, sys2)
    return true
  elseif bottomrightconflicts(sys1, sys2) then
    --Note("Bottom Right Collision detected! ("..sys1.name..","..sys2.name..")")
    -- bottom right collided, try shifting the other guy down (add pixels)
    sys2.top = sys1.bottom + 1
    sys2.bottom = sys2.top + WindowFontInfo(win, font, 1)
    --sys1, sys2 = findbestsolution(sys1, sys2)
    return true
  else
    return false
  end
end

function topleftconflicts(s1, s2)
  return ((s1.left >= s2.left and s1.left <= s2.right) and (s1.top <= s2.bottom and s1.top >= s2.top))
end

function bottomleftconflicts(s1, s2)
  return ((s1.left >= s2.left and s1.left <= s2.right) and (s1.bottom <= s2.bottom and s1.bottom >= s2.top))
end

function toprightconflicts(s1, s2)
  return ((s1.right >= s2.left and s1.right <= s2.right) and (s1.top <= s2.bottom and s1.top >= s2.top))
end

function bottomrightconflicts(s1, s2)
  return ((s1.right >= s2.left and s1.right <= s2.right) and (s1.bottom <= s2.bottom and s1.bottom >= s2.top))
end

local offsetgrid = { {-1, -1}, {-1, 0}, {-1, 1},
                     {0 , -1}, {0 , 0}, {0 , 1},
                     {1 , -1}, {1 , 0}, {1 , 1} }

function findbestsolution(sys1, sys2)
  local best = 10000 -- arbitrarily large number so we should always find something smaller
  local startsys1 = sys1
  local startsys2 = sys2
  local testsys1 = sys1
  local testsys2 = sys2
  local bestsys1 = sys1
  local bestsys2 = sys2
  for i=10, 200, 10 do
    for a, b in ipairs(offsetgrid) do
      testsys1.left = startsys1.left + b[1]*i
      testsys1.right = startsys1.right + b[1]*i
      testsys1.top = startsys1.top + b[2]*i
      testsys1.bottom = startsys1.bottom + b[2]*i
      for j, k in ipairs(offsetgrid) do
        testsys2.left = startsys2.left + k[1]*i
        testsys2.right = startsys2.right + k[1]*i
        testsys2.top = startsys2.top + k[2]*i
        testsys2.bottom = startsys2.bottom + k[2]*i
        if a~=j then -- don't test the same thing twice
          local test = systemnamedistance(testsys1, testsys2)
          if test < best then
            best = test
            bestsys1 = testsys1
            bestsys2 = testsys2
            Note("better solution found: 1="..bestsys1.name..":"..bestsys1.left..","..bestsys1.top.." 2="..bestsys2.name..":"..bestsys2.left..","..bestsys2.top.." dist: "..best)
          end
        end
      end
    end
  end
  Note("best solution found: 1="..bestsys1.name..":"..bestsys1.left..","..bestsys1.top.." 2="..bestsys2.name..":"..bestsys2.left..","..bestsys2.top.." dist: "..best)
  return bestsys1, bestsys2
end

function systemnamedistance(sys1, sys2)
  return sysdistance(sys1) + sysdistance(sys2)
end
   

function sysdistance(sys)
  local bx = (sys.left + ((sys.right-sys.left)/2))
  local by = (sys.top + ((sys.bottom-sys.top)/2))
  return math.sqrt(((sys.x-bx)*(sys.x-bx))+((sys.y-by)*(sys.y-by)))
end
  
function drawWindow(name, line, args)

	WindowRectOp (win, miniwin.rect_fill, 0, 0, width, height, ColourNameToRGB("black"))  -- draw blank rectangle to "erase" window contents
	
	 -- draw border
  WindowRectOp (win, 5, 0, 0, 0, 0, 5, 15 + 0x1000)
	
	--drag handler
	movewindow.add_drag_handler (win, 0, 0, 0, WindowFontInfo(win, font, 1))
	
	for i=1,#systems,1 do
		local sys = systems[i]
		local x = scaleXCoord(sys.x)  -- scale X coordinate
		local y = scaleYCoord(sys.y) -- scale Y coordinate
		
		WindowText (win, font, ((sys.planet~="" and sys.planet) or sys.name),   -- text
                sys.left, sys.top, sys.right, sys.bottom,        -- rectangle
                ColourNameToRGB ("white"), -- colour
                false)              -- not Unicode
                
    	WindowCircleOp (win, miniwin.circle_ellipse, -- circle
                x-5, y-5, x+5, y+5,                -- Left, Top, Right, Bottom
                ColourNameToRGB("lawngreen"), miniwin.pen_solid, 1, -- pen width 1
                ColourNameToRGB("lawngreen"), miniwin.brush_solid)  -- brush
        
        WindowAddHotspot(win, i,  
                -- x, y, WindowTextWidth (win, font, tostring(sys.name)), WindowFontInfo (win, font, 1),   -- rectangle, left, top, right, bottom
                 sys.left, sys.top, sys.right, sys.bottom,
                 "drawPaths", -- mousehover
                 "hidePaths",        -- mousecancelhover
                 "onClick",         -- mousedown
                 "",   -- mousecanceldown
                 "",           -- mouseup
                 sys.name.. " (" .. sys.x .. "," .. sys.y .. ")",  -- tooltip text
                 1, 0)
    end
  
  	-- add the drag handler so they can move the window around
  	--local font_height = WindowFontInfo (win, font, 1)
  	--movewindow.add_drag_handler (win, 0, 0, 0, font_height)
  	
  	-- draw X in the corner to close the window
  	WindowLine (win, width-15, 5, width-5, 15, ColourNameToRGB ("white"), miniwin.pen_solid, 1)
  	WindowLine (win, width-15, 15, width-5, 5, ColourNameToRGB ("white"), miniwin.pen_solid, 1)
  	WindowAddHotspot(win, "windowX",
  			width-15, 5, width-5, 15,
  			"",                   --mousehover
  			"",                   --mouseoffhover
  			"destroyWindow",      --mousedown
  			"",                   --mouseoffdown
  			"",                   --mouseup
  			"Close hypmap window",
  			1, 0)
  
  	-- heading line
 	WindowText (win, font, "Galaxy Map", 5, 5, 0, 0, ColourNameToRGB  "white")
 	
  -- draw hyper path and ship so they are always on top
	drawHyperpath()
	
  drawResizer(win, width, height)
 	
  WindowShow (win,  true)  -- show it
  	--BroadcastPlugin(999, "repaint")
end

function drawHyperpath()
	if haveCoords() then -- if we are in a location that can be drawn on the map
	  drawCoords()
	  if haveDestination() then -- if we have a destination that can be drawn on the map
	    drawRoute()
	  end
	end
end

function haveCoords()
  currentX = tonumber(getmsdp("SHIPGALX"))
  currentY = tonumber(getmsdp("SHIPGALY"))
  currentSystem = getmsdp("SHIPSYSNAME")
  --currentPlanet = getmsdp("PLANET") -- disabled until planet is fixed
  
  if ((startx ~= nil and starty ~= nil) and inHyper) then -- if we have a starting spot on the map (we should be in hyper)
    --Note("passed havecoords 1")
    return true
  end
  --if (currentX ~= 0 or currentY ~= 0 or currentSystem ~= "" or currentPlanet ~= "") then -- if we are in regular space
  -- planet doesn't work so we'll ignore it for now
  if (currentX ~= 0 or currentY ~= 0 or currentSystem ~= "") then -- if we are in regular space

    --Note("passed havecoords 2")
    return true
  end -- we arent anywhere! abort!!
  return false
end

function drawCoords()
  if currentX ~= 0 or currentY ~= 0 then -- our coords are in the x,y form
    --Note("passed drawcoords 1")
    realx = scaleXCoord(currentX)
    realy = scaleYCoord(currentY)
    startrealx = currentX
    startrealy = currentY
    --Note("Assigning new real values in x,y coords")
    --Tell("realx: "..string.format("%.0f",realx).." realy: "..string.format("%.0f",realy))
    --Tell(" startx: "..string.format("%.0f",startx or 0).." starty: "..string.format("%.0f",starty or 0))
    --Tell(" endX: "..string.format("%.0f",endX or 0).." endY: "..string.format("%.0f\n",endY or 0))
  else  -- not x,y coords
    for k, v in pairs(systems) do
      if currentSystem ~= "" and (string.lower(v.name) == string.lower(currentSystem)) then -- scroll planet list and see if our current system matches one of the system names
        --Note("passed drawcoords 2")
        realx = scaleXCoord(v.x)
        realy = scaleYCoord(v.y)
        startrealx = v.x
        startrealy = v.y
        --Note("Assigning new real values in system coords")
        --Tell("realx: "..string.format("%.0f",realx).." realy: "..string.format("%.0f",realy))
        --Tell(" startx: "..string.format("%.0f",startx or 0).." starty: "..string.format("%.0f",starty or 0))
        --Tell(" endX: "..string.format("%.0f",endX or 0).." endY: "..string.format("%.0f\n",endY or 0))
      elseif currentPlanet ~= "" and (string.lower(v.planet) == string.lower(currentPlanet)) then -- scroll planet list and see if our current planet matches one of the planet names
        --Note("passed drawcoords 3")
        realx = scaleXCoord(v.x)
        realy = scaleYCoord(v.y)
        startrealx = v.x
        startrealy = v.y
        --Note("Assigning new real values in planet coords")
        --Tell("realx: "..string.format("%.0f",realx).." realy: "..string.format("%.0f",realy))
        --Tell(" startx: "..string.format("%.0f",startx or 0).." starty: "..string.format("%.0f",starty or 0))
        --Tell(" endX: "..string.format("%.0f",endX or 0).." endY: "..string.format("%.0f\n",endY or 0))
      end
    end
  end
  if not inHyper then
    WindowCircleOp(win, 1, realx-(shipsize/2), realy-(shipsize/2), realx+(shipsize/2), realy+(shipsize/2), ColourNameToRGB("red"), 0, 0, ColourNameToRGB("red"), 0)
  end
end

function haveDestination()
  local storedsystem = GetPluginVariable("b2c06b3dcc775c0ede861316", "planetname") or ""
  local storedX = nil
  local storedY = nil
  
  --Note("storedsystem: "..storedsystem)
  
  if storedsystem == "" then -- we didn't get anything from lotjcalc
    startx = nil
    starty = nil
    startrealx = nil
    startrealy = nil
    --coordchanged = false
    --Note("failed havedest 1")
    return false
  end
  if string.find(storedsystem, "%([%d-]+%,[%d-]+%)") then -- we got an uncharted coordinate from lotjcalc
    local ax, bx = string.find(storedsystem, "%([%d-]+%,", 0, false)
    storedX = tonumber(string.sub(storedsystem, ax+1, bx-1))
    local ay, by = string.find(storedsystem, "%,[%d-]+%)", bx, false)
    storedY = tonumber(string.sub(storedsystem, ay+1, by-1))
    endX = scaleXCoord(storedX)
    endY = scaleYCoord(storedY)
    --Note("passed havedest 2")
    --Note("storedX = "..string.format("%.0f",storedX).." storedY = "..string.format("%.0f",storedY))
    --Note("x,y = "..string.format("%.0f",endX).. ","..string.format("%.0f",endY))
    return true
  
  end
  -- if we make it this far, it means we got a planet or system name from lotjcalc, scroll through and find out who it belongs to
  for k, v in pairs(systems) do -- check to see if lotjcalc's system belongs to one of the known systems or planets
    if ((string.lower(v.name) == string.lower(storedsystem)) or (string.lower(v.planet) == string.lower(storedsystem))) then
      endX = scaleXCoord(v.x)
      endY = scaleYCoord(v.y)
      --Note("passed havedest 3")
      --Note("planet x,y = "..string.format("%.0f",endX)..","..string.format("%.0f",endY))
      return true
    end
  end
  --Note("failed havedest 4")
  return false
end

function drawRoute()
	local percent = 0
	local pixels = 0
  local routeColor = "gray"
	
	if (totalJump > 0 and partialJump > 0) then
		percent = (totalJump - partialJump) / totalJump
	end
  
  -- find our starting position to draw a line from
  if ((startx == nil) and (starty == nil)) then
    --startx = realx
    --starty = realy
    startx = startrealx
    starty = startrealy
    --Note("changed startx to: "..string.format("%.0f",startx).." changed starty to: "..string.format("%.0f",starty))
  end
  -- check our route status to draw appropriate color
  if (routeType == "checking" or routeType == "aborted") then
    routeColor = "gray"
  elseif (routeType == "error") then
    routeColor = "darkred"
  elseif (routeType == "checked") then
    routeColor = "white"
  elseif (routeType == "completed") then
    routeColor = "lime"
  end
  
  --Tell("realx: "..string.format("%.0f",realx).." realy: "..string.format("%.0f",realy))
  --Tell(" startx: "..string.format("%.0f",startx).." starty: "..string.format("%.0f",starty))
  --Tell(" endX: "..string.format("%.0f",endX).." endY: "..string.format("%.0f\n",endY))
  -- draw our route and place on that route
  --WindowLine(win, startx, starty, endX, endY, ColourNameToRGB(routeColor), miniwin.pen_solid, 2)
  WindowLine(win, scaleXCoord(startx), scaleYCoord(starty), endX, endY, ColourNameToRGB(routeColor), miniwin.pen_solid, 2)
  if inHyper then
    if partialJump < 0 then
      WindowCircleOp(win, 1, endX-(shipsize/2), endY-(shipsize/2), endX+(shipsize/2), endY+(shipsize/2), ColourNameToRGB("red"), 0, 0, ColourNameToRGB("red"), 0)
    else
      --WindowCircleOp(win, 1, (((1-percent)*startx)+(percent*endX))-(shipsize/2), (((1-percent)*starty)+(percent*endY))-(shipsize/2), (((1-percent)*startx)+(percent*endX))+(shipsize/2), (((1-percent)*starty)+(percent*endY))+(shipsize/2), ColourNameToRGB("red"), 0, 0, ColourNameToRGB("red"), 0)
      WindowCircleOp(win, 1, (((1-percent)*scaleXCoord(startx))+(percent*endX))-(shipsize/2), (((1-percent)*scaleYCoord(starty))+(percent*endY))-(shipsize/2), (((1-percent)*scaleXCoord(startx))+(percent*endX))+(shipsize/2), (((1-percent)*scaleYCoord(starty))+(percent*endY))+(shipsize/2), ColourNameToRGB("red"), 0, 0, ColourNameToRGB("red"), 0)
    end
  end
end

function jumpChecking()
  routeType = "checking"
end
function jumpError()
  routeType = "error"
end
function jumpAborted()
  routeType = "aborted"
end
function jumpChecked()
  if (routeType == "checking") then
    routeType = "checked"
  end
end
function jumpCompleted()
  if (routeType == "checked") then
    routeType = "completed"
  end
end
function enterHyper()
  inHyper = true
end

function togglePaths(flags, hotspot_id)
	if(showPaths == true) then
		showPaths = false
		hidePaths()
	else
		showPaths = true
		drawPaths(flags, hotspotid)
	end
end


function hidePaths(flags, hotspot_id)
	--WindowRectOp (win, miniwin.rect_fill, 0, 0, 800, 600, ColourNameToRGB("black"))  -- draw blank rectangle to "erase" window contents
	drawWindow() -- redraw window
	
end

function scaleXCoord(coord)
  local percent = ((coord + math.abs(minX)) / (math.abs(minX)+maxX))*100
  return ((((100-percent) / 100) * 10) + ((percent) / 100) * (width-10))
end

function scaleYCoord(coord)
  local percent = ((coord + math.abs(minY)) / (math.abs(minY)+maxY))*100
  return ((((100-percent) / 100) * (height-10)) + ((percent) / 100) * 10)
end

function onClick(flags, hotspot_id)
	local sys = systems[tonumber(hotspot_id)]
	if (sys.planet ~= "") then
		Execute("calculate " .. sys.planet)
	else
		Execute("calculate '" .. sys.x .. " " .. sys.y .. "'")
	end
end

function drawPaths(flags, hotspot_id)
	local sys = systems[tonumber(hotspot_id)]
	if not sys then
		return
	end
	local ax = scaleXCoord(tonumber(sys.x))
	local ay = scaleYCoord(tonumber(sys.y))
	for i, v in ipairs(systems) do
		if (v ~= sys) then
			local bx = scaleXCoord(tonumber(v.x))
			local by = scaleYCoord(tonumber(v.y))
			WindowLine (win, ax, ay, bx, by, ColourNameToRGB ("orange"), miniwin.pen_solid, 1)
			WindowText (win, font, distance(sys, v),   -- text
                (ax+bx)/2, (ay+by)/2, 0, 0,        --draw distance in the middle of draw path
                ColourNameToRGB ("white"), -- colour
                false)              -- not Unicode
			
		end
	end
	WindowShow (win,  true)  -- show it
		--BroadcastPlugin(999, "repaint")

end

function destroyWindow(name, list, args)
	WindowShow (win, false)
	visible = false
	--WindowDelete(win)
end

function distance(a, b)
	return string.format("%.0f", math.sqrt(((a.x-b.x)*(a.x-b.x))+((a.y-b.y)*(a.y-b.y))))
end

function hyperJumpTick()
	if (totalJump > 0 and partialJump > 0) then
		partialJump = partialJump - 50
		if (visible) then
			--Note("Tick: " .. partialJump .. "/" .. totalJump)
			drawWindow()
		end
	end
end

function storeTotalJump(name, list, args)
	if (args[1] and tonumber(args[1]) > 0) then
		totalJump = tonumber(args[1])
	end
	if (visible) then
		drawWindow()
	end
end

function storePartialJump(name, list, args)
	if (args[1] and tonumber(args[1]) > 0) then
		if (totalJump == 0) then
		  inHyper = true
			totalJump = tonumber(args[1])
			EnableTimer("hyperJumpTicker", true)
		end
		partialJump = tonumber(args[1])
	end
	if (visible) then
		--Note("Tock: " .. partialJump .. "/" .. totalJump)
		drawWindow()
	end
end

function clearJump()
  startx = nil
  starty = nil
  startrealx = nil
  startrealy = nil
  realx = nil
  realy = nil
  storedsystem = ""
  storedX = nil
  storedY = nil
  endX = nil
  endY = nil
	totalJump = 0
	partialJump = 0
	inHyper = false
	coordchanged = false
	jumpCompleted()
	CallPlugin("b2c06b3dcc775c0ede861316", "clearPlanet", "")
	EnableTimer("hyperJumpTicker", false)
	if (visible) then
		drawWindow()
	end
end

----------------------------------------------------------------------
-- Called as the windows are dragged around.
----------------------------------------------------------------------
function ResizeMoveCallback(flags, hotspot_id)
   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startposx
   startposx = posx
   if (width < MIN_WIDTH) then
      width = MIN_WIDTH
      startposx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startposx = GetInfo(281)
   end
   
   height = height + posy - startposy
   startposy = posy
   if (height < MIN_HEIGHT) then
   	height = MIN_HEIGHT
   	startposy = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
   	height = GetInfo(280)-windowinfo.window_top
   	startposy = GetInfo(280)
   end
   
   
	if (utils.timer() - lastRefresh > 0.0333) then
		SetUpHotspotsAndDraw(false)
		lastRefresh = utils.timer()
	end
end

lastRefresh = 0

---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback ()
   SetUpHotspotsAndDraw(false) -- true here causes old lines to re-wrap at the new size
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
     startposx, startposy = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      --right_click_menu()
   end
   return true
end

function LeftClickOnly(flags, hotspot_id, win)
   if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
      return true
   end
   return false
end

function OnPluginInstall () 
  
    --- Setup the windows
   SetUpHotspotsAndDraw(true)
   
  -- add the fonts                
  check(WindowFont (win, font, "Arial", 10, true, false, false, false))
  
  drawWindows()
    
end -- OnPluginInstall

--================================================================================
-- Called by OnPluginInstall, but also by redraw routine to refresh the screen
-- and (if the first time) add the resizer tag, otherwise move the resizer relative
-- to the main window.
--=================================================================================
function SetUpHotspotsAndDraw(firstTime)
	if (firstTime) then
		WindowCreate (win, 0, 0, width, height, miniwin.pos_center_all, 0, ColourNameToRGB("black")) -- create windows
		windowinfo = movewindow.install (win, 6) -- default to 6 (on top right)
		movewindow.add_drag_handler (win, 0, 0, 0, WindowFontInfo (win, font, 1))
		effectiveWidth = math.min(width, GetInfo(281)-windowinfo.window_left)
		WindowAddHotspot (win, "resize", effectiveWidth-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, effectiveWidth, height, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
		WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
		check(WindowFont (win, font, "Arial", 10, true, false, false, false))
	else -- not our first time drawing
		-- everything has already been made
		-- just move them back into place
		
		effectiveWidth = math.min(width, GetInfo(281)-windowinfo.window_left)
		WindowResize(win, effectiveWidth, height, 0x000000)
		WindowMoveHotspot(win, "resize", effectiveWidth-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, effectiveWidth, height)
		setupConflicts()
    drawWindows()
	end
end

function drawWindows()
  if visible then
    drawWindow()
  end
end

function drawResizer(window, winwidth, winheight)
   -- draw the resize widget bottom right corner.
   WindowLine(window, winwidth-3, winheight-2, winwidth-2, winheight-3, 0xffffff, 0, 2)
   WindowLine(window, winwidth-4, winheight-2, winwidth-2, winheight-4, 0x696969, 0, 1)
   WindowLine(window, winwidth-6, winheight-2, winwidth-2, winheight-6, 0xffffff, 0, 2)
   WindowLine(window, winwidth-7, winheight-2, winwidth-2, winheight-7, 0x696969, 0, 1)
   WindowLine(window, winwidth-9, winheight-2, winwidth-2, winheight-9, 0xffffff, 0, 2)
   WindowLine(window, winwidth-10, winheight-2, winwidth-2, winheight-10, 0x696969, 0, 1)
   WindowLine(window, winwidth-12, winheight-2, winwidth-2, winheight-12, 0xffffff, 0, 2)
   WindowLine(window, winwidth-13, winheight-2, winwidth-2, winheight-13, 0x696969, 0, 1)
end


--============================================================================
-- Central function for listening to data broadcast by LotJMSDPHandler.xml
-- Stores broadcast information locally to be easily accessed by plugin
--============================================================================

function OnPluginBroadcast (msg, id, name, text)
	-- Look for MSDP Handler.
	if (id == 'b3aae34498d5bf19b5b2e2af') then
		-- HUGE FIXME.. not an idea solution
		--if (msg == 91) then -- we got table information from MSDP handler
			-- store information in our own msdp table
			--key = string.sub(text, 0, string.find(text,",",0,true)-1)  -- parse the variable key
			--val = utils.base64decode(string.sub(text, string.find(text,",",0,true)+1, string.len(text))) -- parse the variable value
			--msdp[key] = val -- store it
		--end
		if (text == 'reload') then
			-- invalidate current data
			page_built = false
			return
		end
		if (utils.timer() - lastRefresh > 0.0333) then
      drawWindows()  -- delay time between window refreshes to avoid flicker
		  lastRefresh = utils.timer()
  	end
  end
end

--============================================================================
-- Function to be used to retrieve msdp information. Returns either the
-- information stored in the local msdp table or gets the requested variable
-- from msdp_helper, if it doesn't exist locally
--============================================================================

--function getmsdp(key)
--	if not IsConnected() then  -- don't try to get stuff if we aren't connected to the mud
--		return ""
--	end
--	if (msdp[key] ~= nil) then  -- if the key has been updated by msdp handler already, retrieve it
--		return msdp[key]
--	elseif (GetPluginVariable("b3aae34498d5bf19b5b2e2af", key) ~= nil) then  -- if the key hasn't been updated, but msdp handler has it cached, retrieve it and store in local table for next time
--		msdp[key] = utils.base64decode(GetPluginVariable("b3aae34498d5bf19b5b2e2af", key))
--		return msdp[key]
--	else
--		ColourNote("red","black", "Warning: Unable to find key " .. key)
--		return ""   -- should never get here  -- can't find the requested key
--	end
--	return "" -- should never ever get here
--end

--==============================================================================
-- function used to retrieve information from LotJMSDPHandler.xml
--==============================================================================

function getmsdp(fieldname)
  if not IsConnected() then
    return ""
  end

	assert (fieldname, "nil fieldname passed to msdpval")
	
	rc, result = CallPlugin("b3aae34498d5bf19b5b2e2af","msdpval",fieldname)
	result2 = utils.base64decode(GetPluginVariable("b3aae34498d5bf19b5b2e2af", fieldname) or "")
	
	if result ~= nil then
	  return result
	elseif result2 ~= nil then
	  return result2
	else
	  return ""
	end
end -- function msdpval

function OnPluginSaveState ()
  -- save window current location for next time  
  movewindow.save_state (win)
  SetVariable("width", width)
  SetVariable("height", height)
  SetVariable("systems", serialize.save("systems"))
end -- function OnPluginSaveState

require "checkplugin"
function OnPluginListChanged()
	do_plugin_check_now ("b3aae34498d5bf19b5b2e2af", "LotJMSDPHandler") -- check we have MSDP handler plugin
	do_plugin_check_now ("b2c06b3dcc775c0ede861316", "LotJCalc") -- check we have LotJCalc
end

  ]]> 
  </script>
  </muclient>